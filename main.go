package main

import (
	"os"
	"strings"
	"text/template"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/ec2"
)

func describeRegions(region string) *ec2.DescribeRegionsOutput {
	svc := ec2.New(session.New(), &aws.Config{Region: aws.String(region)})
	regionResp, err := svc.DescribeRegions(nil)
	if err != nil {
		panic(err)
	}
	return regionResp
}

func describeAvailabilityZones(region string) *ec2.DescribeAvailabilityZonesOutput {
	params := &ec2.DescribeAvailabilityZonesInput{
		Filters: []*ec2.Filter{
			&ec2.Filter{
				Name: aws.String("state"),
				Values: []*string{
					aws.String("available"),
				},
			},
		},
	}
	svc := ec2.New(session.New(), &aws.Config{Region: &region})
	azResp, err := svc.DescribeAvailabilityZones(params)
	if err != nil {
		panic(err)
	}
	return azResp
}

func renderTemplate(regionMap map[string]string) {
	tmplStr := `# Generated by terraform-aws-vars. DO NOT EDIT MANUALLY.
variable "az" {
  default = { {{range $index,$element := .}}
    {{$index}} = "{{$element}}"{{end}}
  }
}
`
	tmpl, err := template.New("test").Parse(tmplStr)
	if err != nil {
		panic(err)
	}
	err = tmpl.Execute(os.Stdout, regionMap)
	if err != nil {
		panic(err)
	}
}

func main() {
	regionResp := describeRegions("us-east-1")
	regionMap := make(map[string]string)
	for _, region := range regionResp.Regions {
		regionResp := describeAvailabilityZones(*region.RegionName)
		var zoneNames []string
		for _, az := range regionResp.AvailabilityZones {
			zoneNames = append(zoneNames, *az.ZoneName)
		}
		regionMap[*region.RegionName] = strings.Join(zoneNames, ",")
	}
	renderTemplate(regionMap)
}
